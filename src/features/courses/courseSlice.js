import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCourse } from './courseAPI';

const initialState = {
  value: [],
  status: 'idle',
  error: ''
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const courseAsync = createAsyncThunk(
  'course/fetchCourse',
  async () => {
    try {
      const response = await fetchCourse();
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    } catch (error) {
      console.log(error);
    }
  }
);

export const courseSlice = createSlice({
  name: 'course',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(courseAsync.pending, (state) => {
        state.status = 'loading';
      }).addCase(courseAsync.rejected, (state, action) => {
        state.status = 'failed'
        state.error = action.error.message
      })
      .addCase(courseAsync.fulfilled, (state, action) => {
        state.status = 'fulfilled';
        state.value = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCourses = (state) => state.course.value[0];
export const selectStatus = (state) => state.course.status;


export default courseSlice.reducer;
